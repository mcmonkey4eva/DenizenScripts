# dEssentials: Things a servers needs in one easy package!
# --- TELEPORTING: Commands related to teleportation.
# See dEssentials-Core.yml for information

dessentials_command_spawn:
    type: command
    debug: false
    name: spawn
    description: Teleports you to the current world's spawn point.
    usage: /spawn
    permission: denizen.essentials.user.spawn
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - teleport <player> <player.world.spawn_location>

dessentials_command_setspawn:
    type: command
    debug: false
    name: setspawn
    description: Sets the current world's spawn point to your location.
    usage: /setspawn
    permission: denizen.essentials.admin.setspawn
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - adjust <player.world> spawn_location:<player.location>
    - narrate "<&2>Spawn location in <&b><player.world.name> <&2>set to <&b><player.location.simple.replace[,<player.world.name>]><&2>."

dessentials_command_setwarp:
    type: command
    debug: false
    name: setwarp
    description: Sets a teleport point at your current location.
    usage: /setwarp <&lt>name<&gt>
    permission: denizen.essentials.admin.setwarp
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> != 1 {
      - narrate "<&c>/setwarp <&lt>name<&gt>"
      - queue clear
      }
    - if <context.args.get[1].is[!=].to[<context.args.get[1].escaped>]> {
      - narrate "<&c>Simple (alphanumeric) warp names only please."
      - queue clear
      }
    - define existing <server.flag[dessentials.warps.<context.args.get[1]>]||null>
    - if %existing% != null {
      - narrate "<&c>Warning<&co> Override existing warp (at location<&co> <&b><def[existing].simple><&c>)"
      }
    - flag server dessentials.warps.<context.args.get[1]>:<player.location>
    - narrate "<&2>Set warp <&b><context.args.get[1]><&2> at <&b><player.location.simple><&2>!"

dessentials_command_warp:
    type: command
    debug: false
    name: warp
    description: Warps to a given teleport point, or shows a list.
    usage: /warp [name]
    permission: denizen.essentials.user.warp
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only. (Coming soon: /warp [name] [player])"
      - queue clear
      }
    - if <context.args.size> != 1 {
      # TODO: Warp list!
      - narrate "Warp list coming soon!"
      - queue clear
      }
    - if <context.args.get[1].is[!=].to[<context.args.get[1].escaped>]> {
      - narrate "<&c>Simple (alphanumeric) warp names only please."
      - queue clear
      }
    - define existing <server.flag[dessentials.warps.<context.args.get[1]>]||null>
    - if %existing% == null {
      - narrate "<&c>Unknown warp name."
      - queue clear
      }
    # TODO: Delay option, price option
    - narrate "<&6>Teleporting..."
    - teleport <player> %existing%

dessentials_command_home: 
  type: command 
  name: home 
  usage: /home <&lt>argument<&gt> 
  description: Save location as home or teleport home. 
  permission: denizen.essentials.user.home 
  allowed help: 
  - determine <player.has_permission[denizen.essentials.user.home]||false> 
  tab complete: 
  - if <player.has_permission[denizen.essentials.user.home].not||true> queue clear 
  - determine <li@reset|remove.filter[starts_with[<context.args.last||>]]> 
  script: 
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <player.has_permission[denizen.essentials.user.home].not||true> { 
      - narrate "<&c>Sorry, you don't have permission to use this command." 
      - queue clear 
      } 
    - if <context.args.is_empty> { 
      - if <player.has_flag[dessentials.home].not> { 
        - flag "dessentials.home:<player.location.simple>"  
        - narrate "<&2>Home added!" 
        } 
        else { 
        - teleport <player> <player.flag[dessentials.home]> 
        } 
        - queue clear 
      } 
    - choose <context.args.get[1]>: 
      - case reset: 
        - if <player.has_flag[dessentials.home].not> {
          - narrate "<&c>No home found to reset!"
          - queue clear
          }
        - flag player "dessentials.home:!" 
        - narrate "<white>Home removed!"
        - wait 1        
        - flag player "dessentials.home:<player.location.simple>" 
        - narrate "<&2>Home added!" 

      - case remove:
        - if <player.has_flag[dessentials.home].not> {
          - narrate "<&c>No home found to remove!"
          - queue clear
          } 
        - flag player "dessentials.home:!" 
        - narrate "<&f>Home removed!"
         
      - default: 
        - narrate "<&c>Unknown Arguments!"

