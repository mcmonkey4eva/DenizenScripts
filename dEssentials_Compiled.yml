# |------------------------------------
# | D E N I Z E N   E S S E N T I A L S
# |
# | Essentials rewritten in Denizen!
# | dEssentials: Things a servers needs in one easy package!
# | -----------------------------------
#
# @author mcmonkey
# @version 0.1
# @denizen-version 0.9.7
# @denizen-build 1589
# @date 2015-07-16
#
# @special_thanks_to Oz (some contributions)
# @special_thanks_to Fortifier42 (updates)
#
# @recommended dWorldEditor http://mcmonkey.org/denizen/repo/entry/22
# @recommended dRegions http://mcmonkey.org/denizen/repo/entry/23
# @recommended dSentry http://mcmonkey.org/denizen/repo/entry/0
#
# Installation:
# Just drop it in your scripts folder and reload :D
# We recommend installation of a permissions plugin for full support.
#
# Usage:
# Use similarly to Essentials.
#
# Ignoring:
# We are not replacing /xp, /weather, /give ... at this time
# because Minecraft and Denizen provide sufficient default commands.
#
# Commands/Permissions:
# /name      -> short description                    -> permission
# ---------------------- Core        -------------------------------------------
# ---------------------- Teleporting -------------------------------------------
# /spawn     -> warp to the world spawn              -> denizen.essentials.user.spawn
# /setspawn  -> set the world spawn point            -> denizen.essentials.admin.setspawn
# /warp      -> warp to a teleport point             -> denizen.essentials.user.warp
# /setwarp   -> set a teleport point                 -> denizen.essentials.admin.setwarp
# ---------------------- Items       -------------------------------------------
# /itemdb    -> shows information on an item         -> denizen.essentials.user.itemdb
# /item      -> gives an item to the player          -> denizen.essentials.admin.item
# /invsee    -> shows a player's inventory           -> denizen.essentials.admin.invsee
# /endersee  -> shows a player's enderchest          -> denizen.essentials.admin.endersee
# /enchant   -> allows you to easily enchant an item -> denizen.essentials.admin.enchant
# ---------------------- Control     -------------------------------------------
# /time      -> sets the world's time                -> denizen.essentials.admin.time
# /day       -> sets the time to day                 -> denizen.essentials.admin.time
# /night     -> sets the time to night               -> denizen.essentials.admin.time
# /speed     -> sets a player's speed                -> denizen.essentials.admin.speed
# /butcher   -> removes entities within area         -> denizen.essentials.admin.butcher
# ---------------------- Fun         -------------------------------------------
# /celebrate -> launches a celebration show          -> denizen.essentials.user.celebrate
# ---------------------- Utility     -------------------------------------------
# sign coloring                                     -> denizen.essentials.utility.signcolor
# chat coloring                                     -> denizen.essentials.utility.chatcolor
# ------------------------------------------------------------------------------

dessentials_core_placeholder:
    type: yaml data
    description: This is here so the YAML file doesn't show an error for being empty.
                 This file will eventually be used for 'core' commands, if any are chosen.
# dEssentials: Things a servers needs in one easy package!
# --- CONTROL: Commands to control server information.
# See dEssentials-Core.yml for information

dessentials_command_time:
    type: command
    debug: false
    name: time
    description: Sets the world's time.
    usage: /time <&lt>time<&gt> [world]
    permission: denizen.essentials.admin.time
    script:
    - if <context.server> && <context.args.size> != 2 {
      - narrate "<&c>This command is for players only."
      - narrate "<&c>Available for the server<&co> /time <&lt>time<&gt> <&lt>world<&gt>"
      - queue clear
      }
    - if <context.args.size> == 0 {
      - narrate "<&c>/time <&lt>time<&gt> [world]"
      - define hour <player.world.time.div[1000].add[6].round>
      - if <def[hour]> >= 24 {
        - define hour <def[hour].sub[24]>
        }
      - narrate "<&2>Time in <&b><player.world.name><&2> is <&b><player.world.time>ticks<&2> (<&b><def[hour]> o' clock<&2>)."
      - queue clear
      }
    - define world <player.world>
    - if <context.args.size> == 2 {
      - define world w@<context.args.get[2]>
      }
    - if <def[world].name||null> == null {
      - narrate "<&c>Unknown world."
      - queue clear
      }
    - define time <context.args.get[1]>
    - if <def[time].is[==].to[day]> {
      - adjust <def[world]> time:0
      }
      else if <def[time].is[==].to[night]> {
      - adjust <def[world]> time:15000
      }
      else if <def[time].is[==].to[dawn]> {
      - adjust <def[world]> time:23000
      }
      else if <def[time].is[==].to[dusk]> {
      - adjust <def[world]> time:13000
      }
      else if <def[time].contains[<&co>]> {
      - adjust <def[world]> time:<def[time].before[<&co>].sub[6].mul[1000].add[<def[time].after[<&co>].mul[16.666]>]>
      }
      else if <def[time].ends_with[ticks]> {
      - adjust <def[world]> time:<def[time].before[ticks]>
      }
      else {
      - adjust <def[world]> time:<def[time].sub[6].mul[1000]>
      }
    - define hour <player.world.time.div[1000].add[6].round>
    - if <def[hour]> >= 24 {
      - define hour <def[hour].sub[24]>
      }
    - narrate "<&2>Set time in <&b><def[world].name><&2> to <&b><def[world].time>ticks<&2> (<&b><def[hour]> o' clock<&2>)."

dessentials_command_day:
    type: command
    debug: false
    name: day
    description: Changes the world time to day!
    usage: /day
    permission: denizen.essentials.admin.time
    script:
    ## TODO /day [world]
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
    }
    - if <context.args> > 0 {
      - narrate "<&c>/day"
      - queue clear
    }
    - adjust <player.world> time:0
    - narrate "Changed time to day in <player.world.name>"

dessentials_command_night:
    type: command
    name: night
    permission: denizen.essentials.admin.time
    script:
    ## TODO /night [world]
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
    }
    - if <context.args> > 0 {
      - narrate "<&c>/night"
      - queue clear
    }
    - adjust <player.world> time:13500
    - narrate "Changed time to night in <player.world.name>"

dessentials_command_speed:
    type: command
    debug: false
    name: speed
    description: Sets the player's speed.
    usage: /speed <&lt>speed<&gt>
    permission: denizen.essentials.admin.speed
    script:
    # TODO: / speed <speed> <player>
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> == 0 {
      - narrate "<&c>/speed <&lt>speed<&gt>"
      - queue clear
      }
    - define speed <context.args.get[1].as_decimal||null>
    - if <def[speed]> < 0 || <def[speed]> > 1 || <def[speed]> == null {
      - narrate "<&c>Invalid speed. <&2>Valid speeds are between 0 and 1 inclusive."
      - queue clear
      }
    - if <player.is_flying> {
      - define type fly
      }
      else {
      - define type walk
      }
    - adjust <player> <def[type]>_speed:<def[speed]>
    # TODO: remove the %type% nonsense cheatery
    - narrate "<&2>Player <&b><def[type]> <&2>speed set to <&b><player.%type%_speed><&2>."

dessentials_command_butcher:
  type: command
  name: butcher
  description: Butchers all mobs/animals within a radius. Radius defaults to 25 if empty.
  usage: /butcher [{mobs}/animals/ambient/list] [radius]
  permission: denizen.essentials.admin.butcher
  ## TODO type: all
  types: li@mobs|animals|ambient
  mobs: li@spider|creeper|cave_spider|slime|zombie|skeleton|witch|silverfish|enderman
  animals: li@bat|chicken|cow|pig|rabbit|sheep|squid|mushroom_cow
  ambient: li@ocelot|wolf|iron_golem|horse|villager
  script:
  - if <context.server> {
    - narrate "<&c>This command is for players only."
    - queue clear
  }
  - define type mobs
  - define radius 25
  - if <context.args.size> == 1 {
    - define type <context.args.get[1]||null>
    - if <def[type]> == list {
      - narrate "<&2>Valid types are: <&b><script.yaml_key[types].as_list.formatted>"
      - queue clear
    }
  }
  else if <context.args.size> == 2 {
    - define type <context.args.get[1]||null>
    - define radius <context.args.get[2].as_int||null>
  }
  - if !<script.yaml_key[types].as_list.contains[<def[type]>]> {
    - narrate "<&c>Invalid type."
    - queue clear
  }
  - if <def[radius]> == null {
    - narrate "<&c>Invalid radius."
    - queue clear
  }
  - define butcher <player.location.find.entities[<script.yaml_key[<def[type]>]>].within[<def[radius]>].filter[is_npc.not].filter[is_player.not]>
  - narrate "<&2>Removing <&b><def[butcher].size><&2> entities within <&b><def[radius]><&2> blocks of type <&b><def[type]><&2>."
  - remove <def[butcher]>
# dEssentials: Things a servers needs in one easy package!
# --- FUN: Commands that are just for fun. You don't need this file.
# See dEssentials-Core.yml for information

dessentials_command_celebrate:
    type: command
    debug: false
    name: celebrate
    description: Launches a celebration show.
    usage: /celebrate
    permission: denizen.essentials.user.celebrate
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - repeat 15:
      - define x <util.random.decimal[-10].to[10]>
      - define z <util.random.decimal[-10].to[10]>
      - firework <player.location.add[<def[x]>,0,<def[z]>]> power:1 primary:co@random|co@random fade:co@random|co@random random flicker trail
      - if <def[value].mod[5]> == 1 {
        - wait 1
        }
# dEssentials: Things a servers needs in one easy package!
# --- ITEMS: Commands related to the item system.
# See dEssentials-Core.yml for information

dessentials_command_itemdb:
    type: command
    debug: false
    name: itemdb
    description: Shows information on the held item, or a specified item.
    usage: /itemdb [item]
    permission: denizen.essentials.user.itemdb
    script:
    - if <context.server> && <context.args.size> != 1 {
      - narrate "<&c>This command is for players only."
      - narrate "<&c>Available for the server<&co> /itemdb <&lt>item<&gt>"
      - queue clear
      }
    - define item <player.item_in_hand>
    - if <context.args.size> == 1 {
      - define item i@<context.args.get[1]>
      }
    - if <def[item].is[==].to[null]> || <def[item].material.name||null> == null {
      - narrate "<&c>Unknown item."
      - queue clear
      }
    - narrate "<&6>Item<&f><&co> <&b><def[item].material.name>"
    - narrate "<&6>Internal name<&f><&co> <&b><def[item].material.bukkit_enum>"
    - narrate "<&6>Full Denizen descriptor<&f><&co> <&b><def[item]>"
    - narrate "<&6>Data values<&f><&co> <&b><def[item].id><&f><&co><&b><def[item].data>"

dessentials_command_item:
    type: command
    debug: false
    name: item
    description: Gives an item.
    usage: /item <&lt>item<&gt>
    permission: denizen.essentials.admin.item
    aliases:
    - i
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> < 1 {
      - narrate "<&c>/item <&lt>item<&gt>"
      - queue clear
      }
    - define item "i@<context.raw_args>"
    - if <def[item].material.name||null> == null {
      - narrate "<&c>Unknown item."
      - queue clear
      }
    - adjust <def[item]> quantity:1 save:myitem
    - narrate "<&2>Giving <&b><def[item].qty><&2> of <&b><entry[myitem].result><&2>."
    - give <def[item]>

dessentials_command_invsee:
    type: command
    debug: false
    name: invsee
    description: Shows the inventory of another player.
    usage: /invsee <&lt>player<&gt>
    permission: denizen.essentials.admin.invsee
    tab complete:
    - if !<player.has_permission[<script.yaml_key[permission]>]||<context.server>> queue clear
    - determine <server.list_players.parse[name]>
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only!"
      - queue clear
    }
    - if <context.args.size> != 1 {
      - narrate "<&c>/invsee <&lt>player<&gt>"
      - queue clear
    }
    - define player <server.match_offline_player[<context.args.get[1]>]>
    - if <def[player]> == null {
      - narrate "<&c>No player found with name <&b><context.args.get[1]>"
      - queue clear
    }
    - inventory open d:<def[player].inventory>

dessentials_command_endersee:
    type: command
    debug: false
    name: endersee
    description: Shows the enderchest of another player.
    usage: /endersee <&lt>player<&gt>
    permission: denizen.essentials.admin.endersee
    tab complete:
      - if !<player.has_permission[<script.yaml_key[permission]>]||<context.server>> queue clear
      - determine <server.list_players.parse[name].filter[starts_with[<context.args.last>]]>
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only!"
      - queue clear
    }
    - if <context.args.size> != 1 {
      - narrate "<&c>/endersee <&lt>player<&gt>"
      - queue clear
    }
    - define player <server.match_offline_player[<context.args.get[1]>]>
    - if <def[player]> == null {
      - narrate "<&c>No player found with name <&b><context.args.get[1]>"
      - queue clear
    }
    - inventory open d:<def[player].enderchest>

dessentials_command_enchant:
    type: command
    debug: false
    name: enchant
    description: Allows you to enchant the item in hand. Level is required.
    usage: /enchant <&lt>enchantment,level|.../list<&gt>
    permission: denizen.essentials.admin.enchant
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only!"
      - queue clear
    }
    - if <context.args.size> != 1 {
      - narrate "<&c>/enchant <&lt>enchantment,level|...<&gt>/list"
      - queue clear
    }
    - define valid li@ARROW_DAMAGE|ARROW_FIRE|ARROW_INFINITE|ARROW_KNOCKBACK|DAMAGE_ALL|DAMAGE_ANTHROPODSROPODS|DAMAGE_UNDEAD|DEPTH_STRIDER
    - define valid <def[valid].include[DIG_SPEED|DURABILITY|FIRE_ASPECT|KNOCKBACK|LOOT_BONUS_BLOCKS|LUCK|LURE|OXYGEN|PROTECTION_ENVIRONMENTAL]>
    - define valid <def[valid].include[PROTECTION_EXPLOSIONS|PROTECTION_FALL|PROTECTION_FIRE|PROTECTION_PROJECTILE|SILK_TOUCH|THORNS|WATER_WORKER]>
    - if <context.args.get[1]> == list {
      - narrate "<&2>Valid enchantments: <&b><def[valid].formatted.replace[, and].with[,].replace[,].with[<&f>,<&b>]><&2>."
      - queue clear
    }
    - define item <player.item_in_hand>
    - if <def[item]> == i@air {
      - narrate "<&c>Cannot enchant air!"
      - queue clear
    }
    - define enchantments <context.args.get[1].escaped.split[&pipe]>
    - foreach <def[enchantments]> {
      - define enchantment <def[value].split[,].get[1]>
      - if !<def[valid].contains[<def[enchantment]>]> {
        - narrate "<&c>Invalid enchantment <def[enchantment]>"
        - queue clear
      }
      - define level <def[value].split[,].get[2].as_int||null>
      - if <def[level]> == null || <def[level]> < 1 {
        - narrate "<&c>Invalid level or none specified."
        - queue clear
      }
    }
    - adjust <def[item]> enchantments:<def[enchantments]> save:item
    - inventory set o:<entry[item].result> d:<player.inventory> slot:<player.item_in_hand.slot>
    - define enchantments <entry[item].result.enchantments.with_levels>
    - narrate "<&2>Item is now enchanted with <&b><def[enchantments].parse[replace[,].with[: ]].formatted.replace[, and].with[<&2> + <&b>].replace[, ].with[<&2> + <&b>]><&2>"

dessentials_command_heal:
  type: command
  debug: false
  name: heal
  description: Heals yourself or another player to full health.
  usage: /heal [player]
  permission: denizen.essentials.admin.heal
  script:
  ## TODO: partial amount
  ## TODO: multiple players at once.
    - define player <player>
    - if <context.args.size> == 1 {
      - define player <server.match_player[<context.args.get[1]>]||null>
    }
    - if <def[player]> == null {
      - narrate "<&c>Invalid player!"
      - queue clear
    }
    - heal <def[player]>
    - if <def[Player]> == <player> {
      - narrate "<&2>You healed <&b>yourself<&2>."
    }
    else {
      - narrate "<&2>You healed <&b><def[Player].name><&2>."
    }

dessentials_command_feed:
  type: command
  debug: false
  name: feed
  description: Feed yourself or another player fully.
  usage: /feed [player]
  permission: denizen.essentials.admin.feed
  script:
  ## TODO: partial amount
  ## TODO: multiple players at once.
    - define player <player>
    - if <context.args.size> == 1 {
      - define player <server.match_player[<context.args.get[1]>]||null>
    }
    - if <def[player]> == null {
      - narrate "<&c>Invalid player!"
      - queue clear
    }
    - feed <def[player]>
    - if <def[Player]> == <player> {
      - narrate "<&2>You fed <&b>yourself<&2>."
    }
    else {
      - narrate "<&2>You fed <&b><def[Player].name><&2>."
    }
# dEssentials: Things a servers needs in one easy package!
# --- TELEPORTING: Commands related to teleportation.
# See dEssentials-Core.yml for information

dessentials_command_spawn:
    type: command
    debug: false
    name: spawn
    description: Teleports you to the current world's spawn point.
    usage: /spawn
    permission: denizen.essentials.user.spawn
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - teleport <player> <player.world.spawn_location>

dessentials_command_setspawn:
    type: command
    debug: false
    name: setspawn
    description: Sets the current world's spawn point to your location.
    usage: /setspawn
    permission: denizen.essentials.admin.setspawn
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - adjust <player.world> spawn_location:<player.location>
    - narrate "<&2>Spawn location in <&b><player.world.name> <&2>set to <&b><player.location.simple.replace[,<player.world.name>]><&2>."

dessentials_command_setwarp:
    type: command
    debug: false
    name: setwarp
    description: Sets a teleport point at your current location.
    usage: /setwarp <&lt>name<&gt>
    permission: denizen.essentials.admin.setwarp
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only."
      - queue clear
      }
    - if <context.args.size> != 1 {
      - narrate "<&c>/setwarp <&lt>name<&gt>"
      - queue clear
      }
    - if <context.args.get[1].is[!=].to[<context.args.get[1].escaped>]> {
      - narrate "<&c>Simple (alphanumeric) warp names only please."
      - queue clear
      }
    - define existing <server.flag[dessentials.warps.<context.args.get[1]>]||null>
    - if %existing% != null {
      - narrate "<&c>Warning<&co> Override existing warp (at location<&co> <&b><def[existing].simple><&c>)"
      }
    - flag server dessentials.warps.<context.args.get[1]>:<player.location>
    - narrate "<&2>Set warp <&b><context.args.get[1]><&2> at <&b><player.location.simple><&2>!"

dessentials_command_warp:
    type: command
    debug: false
    name: warp
    description: Warps to a given teleport point, or shows a list.
    usage: /warp [name]
    permission: denizen.essentials.user.warp
    script:
    - if <context.server> {
      - narrate "<&c>This command is for players only. (Coming soon: /warp [name] [player])"
      - queue clear
      }
    - if <context.args.size> != 1 {
      # TODO: Warp list!
      - narrate "Warp list coming soon!"
      - queue clear
      }
    - if <context.args.get[1].is[!=].to[<context.args.get[1].escaped>]> {
      - narrate "<&c>Simple (alphanumeric) warp names only please."
      - queue clear
      }
    - define existing <server.flag[dessentials.warps.<context.args.get[1]>]||null>
    - if %existing% == null {
      - narrate "<&c>Unknown warp name."
      - queue clear
      }
    # TODO: Delay option, price option
    - narrate "<&6>Teleporting..."
    - teleport <player> %existing%
# dEssentials: Things a servers needs in one easy package!
# --- UTILITY: Functionality not contained within a command.
# See dEssentials-Core.yml for information

dessentials_utility_events:
    type: world
    debug: false
    events:
        ## Sign Colors ##
        on player changes sign:
        - if <player.has_permission[denizen.essentials.utility.signcolor]||<player.is_op>> {
          - determine <context.new.replace[regex:&([0-9a-fA-Fk-oK-OrR])].with[<red.substring[1,1]>$1]>
          }
        ## Chat Colors ##
        on player chats:
        - if <player.has_permission[denizen.essentials.utility.chatcolor]||<player.is_op>> {
          - determine <context.message.replace[regex:&([0-9a-fA-Fk-oK-OrR])].with[<red.substring[1,1]>$1]>
          }
